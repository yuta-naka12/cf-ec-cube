<?php

namespace Eccube\Repository;

use Customize\Entity\Customer\ApplyPamphlet;
use Eccube\Common\EccubeConfig;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * ApplyPamphletRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ApplyPamphletRepository extends AbstractRepository
{
    /**
     * @var EccubeConfig
     */
    protected $eccubeConfig;

    /**
     * ApplyPamphletRepository constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry){
        parent::__construct($registry, ApplyPamphlet::class);
    }

    /**
     * ブランドの表示順を一つ上げる.
     *
     * @param ApplyPamphlet $applicant
     *
     * @throws \Exception 更新対象のブランドより上位のブランドが存在しない場合.
     */
    public function up(ApplyPamphlet $applicant)
    {
        $sortNo = $applicant->getSortNo();
        $applicant2 = $this->findOneBy(['sort_no' => $sortNo + 1]);

        if (!$applicant2) {
            throw new \Exception(sprintf('%s より上位のブランドが存在しません.', $applicant->getId()));
        }

        $applicant->setSortNo($sortNo + 1);
        $applicant2->setSortNo($sortNo);

        $em = $this->getEntityManager();
        $em->persist($applicant);
        $em->persist($applicant2);
        $em->flush();
    }

    /**
     * ブランドの表示順を一つ下げる.
     *
     * @param ApplyPamphlet $applicant
     *
     * @throws \Exception 更新対象のブランドより下位のブランドが存在しない場合.
     */
    public function down(ApplyPamphlet $applicant)
    {
        $sortNo = $applicant->getSortNo();
        $applicant2 = $this->findOneBy(['sort_no' => $sortNo - 1]);

        if (!$applicant2) {
            throw new \Exception(sprintf('%s より下位のブランドが存在しません.', $applicant->getId()));
        }

        $applicant->setSortNo($sortNo - 1);
        $applicant2->setSortNo($sortNo);

        $em = $this->getEntityManager();
        $em->persist($applicant);
        $em->persist($applicant2);
        $em->flush();
    }

    /**
     * 登録.
     *
     * @param ApplyPamphlet $Applicant
     */
    public function save($Applicant)
    {
        if (!$Applicant->getId()) {
            $sortNo = $this->createQueryBuilder('c')
                ->select('COALESCE(MAX(c.sort_no), 0)')
                ->getQuery()
                ->getSingleScalarResult();
            $Applicant
                ->setSortNo($sortNo + 1);
        }

        $em = $this->getEntityManager();
        $em->persist($Applicant);
        $em->flush();
    }

    /**
     * 削除.
     *
     * @param ApplyPamphlet $applicant
     *
     * @throws ForeignKeyConstraintViolationException 外部キー制約違反の場合
     * @throws DriverException SQLiteの場合, 外部キー制約違反が発生すると, DriverExceptionをthrowします.
     */
    public function delete($applicant)
    {
        $this->createQueryBuilder('c')
            ->update()
            ->set('c.sort_no', 'c.sort_no - 1')
            ->where('c.sort_no > :sort_no')
            ->setParameter('sort_no', $applicant->getSortNo())
            ->getQuery()
            ->execute();

        $em = $this->getEntityManager();

        $em->flush();

        $em->remove($applicant);
        $em->flush();
    }
}
