<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Eccube\Repository;

use Customize\Entity\Product\ProductBrand;
use Eccube\Common\EccubeConfig;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * ProductBrandRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductBrandRepository extends AbstractRepository
{
    /**
     * @var EccubeConfig
     */
    protected $eccubeConfig;

    /**
     * ProductBrandRepository constructor.
     *
     * @param RegistryInterface $registry
     * @param EccubeConfig $eccubeConfig
     */
    public function __construct(
        RegistryInterface $registry,
        EccubeConfig $eccubeConfig
    ){
        parent::__construct($registry, ProductBrand::class);
        $this->eccubeConfig = $eccubeConfig;
    }

    /**
     * ブランドの表示順を一つ上げる.
     *
     * @param ProductBrand $ProductBrand
     *
     * @throws \Exception 更新対象のブランドより上位のブランドが存在しない場合.
     */
    public function up(ProductBrand $ProductBrand)
    {
        $sortNo = $ProductBrand->getSortNo();
        $ProductBrand2 = $this->findOneBy(['sort_no' => $sortNo + 1]);

        if (!$ProductBrand2) {
            throw new \Exception(sprintf('%s より上位のブランドが存在しません.', $ProductBrand->getId()));
        }

        $ProductBrand->setSortNo($sortNo + 1);
        $ProductBrand2->setSortNo($sortNo);

        $em = $this->getEntityManager();
        $em->persist($ProductBrand);
        $em->persist($ProductBrand2);
        $em->flush();
    }

    /**
     * ブランドの表示順を一つ下げる.
     *
     * @param ProductBrand $ProductBrand
     *
     * @throws \Exception 更新対象のブランドより下位のブランドが存在しない場合.
     */
    public function down(ProductBrand $ProductBrand)
    {
        $sortNo = $ProductBrand->getSortNo();
        $ProductBrand2 = $this->findOneBy(['sort_no' => $sortNo - 1]);

        if (!$ProductBrand2) {
            throw new \Exception(sprintf('%s より下位のブランドが存在しません.', $ProductBrand->getId()));
        }

        $ProductBrand->setSortNo($sortNo - 1);
        $ProductBrand2->setSortNo($sortNo);

        $em = $this->getEntityManager();
        $em->persist($ProductBrand);
        $em->persist($ProductBrand2);
        $em->flush();
    }

    /**
     * 登録.
     *
     * @param ProductBrand $ProductBrand
     */
    public function save($ProductBrand)
    {
        if (!$ProductBrand->getId()) {
            $sortNo = $this->createQueryBuilder('c')
                ->select('COALESCE(MAX(c.sort_no), 0)')
                ->getQuery()
                ->getSingleScalarResult();
            $ProductBrand
                ->setSortNo($sortNo + 1);
        }

        $em = $this->getEntityManager();
        $em->persist($ProductBrand);
        $em->flush();
    }

    /**
     * 削除.
     *
     * @param ProductBrand $ProductBrand
     *
     * @throws ForeignKeyConstraintViolationException 外部キー制約違反の場合
     * @throws DriverException SQLiteの場合, 外部キー制約違反が発生すると, DriverExceptionをthrowします.
     */
    public function delete($ProductBrand)
    {
        $this->createQueryBuilder('c')
            ->update()
            ->set('c.sort_no', 'c.sort_no - 1')
            ->where('c.sort_no > :sort_no')
            ->setParameter('sort_no', $ProductBrand->getSortNo())
            ->getQuery()
            ->execute();

        $em = $this->getEntityManager();

        $em->flush();

        $em->remove($ProductBrand);
        $em->flush();
    }
}
