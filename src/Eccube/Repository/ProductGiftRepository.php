<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Eccube\Repository;

use Customize\Entity\Product\ProductGift;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * ProductSupplierRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductGiftRepository extends AbstractRepository
{
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, ProductGift::class);
    }

    /**
     * メーカーの表示順を一つ上げる.
     *
     * @param ProductGift $ProductGift
     *
     * @throws \Exception 更新対象のメーカーより上位のメーカーが存在しない場合.
     */
    public function up(ProductGift $ProductGift)
    {
        $sortNo = $ProductGift->getSortNo();
        $ProductGift2 = $this->findOneBy(['sort_no' => $sortNo + 1]);

        if (!$ProductGift2) {
            throw new \Exception(sprintf('%s より上位のメーカーが存在しません.', $ProductGift->getId()));
        }

        $ProductGift->setSortNo($sortNo + 1);
        $ProductGift2->setSortNo($sortNo);

        $em = $this->getEntityManager();
        $em->persist($ProductGift);
        $em->persist($ProductGift2);
        $em->flush();
    }

    /**
     * メーカーの表示順を一つ下げる.
     *
     * @param ProductGift $ProductGift
     *
     * @throws \Exception 更新対象のメーカーより下位のメーカーが存在しない場合.
     */
    public function down(ProductGift $ProductGift)
    {
        $sortNo = $ProductGift->getSortNo();
        $ProductGift2 = $this->findOneBy(['sort_no' => $sortNo - 1]);

        if (!$ProductGift2) {
            throw new \Exception(sprintf('%s より下位のメーカーが存在しません.', $ProductGift->getId()));
        }

        $ProductGift->setSortNo($sortNo - 1);
        $ProductGift2->setSortNo($sortNo);

        $em = $this->getEntityManager();
        $em->persist($ProductGift);
        $em->persist($ProductGift2);
        $em->flush();
    }

    /**
     * 登録.
     *
     * @param ProductGift $ProductGift
     */
    public function save($ProductGift)
    {
        if (!$ProductGift->getId()) {
            $sortNo = $this->createQueryBuilder('c')
                ->select('COALESCE(MAX(c.sort_no), 0)')
                ->getQuery()
                ->getSingleScalarResult();
            $ProductGift
                ->setSortNo($sortNo + 1);
        }

        $em = $this->getEntityManager();
        $em->persist($ProductGift);
        $em->flush();
    }

    /**
     * 削除.
     *
     * @param ProductGift $ProductGift
     *
     * @throws ForeignKeyConstraintViolationException 外部キー制約違反の場合
     * @throws DriverException SQLiteの場合, 外部キー制約違反が発生すると, DriverExceptionをthrowします.
     */
    public function delete($ProductGift)
    {
        $this->createQueryBuilder('c')
            ->update()
            ->set('c.sort_no', 'c.sort_no - 1')
            ->where('c.sort_no > :sort_no')
            ->setParameter('sort_no', $ProductGift->getSortNo())
            ->getQuery()
            ->execute();

        $em = $this->getEntityManager();

        $em->flush();

        $em->remove($ProductGift);
        $em->flush();
    }
}
