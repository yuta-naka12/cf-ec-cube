<?php

namespace Eccube\Repository;

use Customize\Entity\Order\Sender;
use Doctrine\ORM\QueryBuilder;
use Eccube\Doctrine\Query\Queries;
use Eccube\Util\StringUtil;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * ShippingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SenderRepository extends AbstractRepository
{
    /**
     * @var Queries
     */
    protected $queries;

    /**
     * SenderRepository constructor.
     *
     * @param Queries $queries
     */
    public function __construct(
        RegistryInterface $registry,
        Queries $queries
    ) {
        parent::__construct($registry, Sender::class);
        $this->queries = $queries;
    }

    public function getQueryBuilderBySearchData($searchData)
    {    
        $qb = $this->createQueryBuilder('c')
            ->select('c');
            if (isset($searchData['multi']) && StringUtil::isNotBlank($searchData['multi'])) {
                //スペース除去
            $clean_key_multi = preg_replace('/\s+|[　]+/u', '', $searchData['multi']);
            $id = preg_match('/^\d{0,10}$/', $clean_key_multi) ? $clean_key_multi : null;
            if ($id && $id > '2147483647' && $this->isPostgreSQL()) {
                $id = null;
            }
            $qb
            ->andWhere('c.id = :sender_id OR CONCAT(c.name01, c.name02) LIKE :name OR CONCAT(c.kana01, c.kana02) LIKE :kana')
            ->setParameter('sender_id', $id)
            ->setParameter('name', '%'.$clean_key_multi.'%')
            ->setParameter('kana', '%'.$clean_key_multi.'%');
        }
        return $this->queries->customize(QueryKey::SENDER_SEARCH, $qb, $searchData);
    }

    /**
     * 同一商品のお届け先情報を取得
     *
     * @param \Eccube\Entity\Order|null $Order
     * @param \Eccube\Entity\ProductClass|null $productClass
     *
     * @return array
     */
    public function findShippingsProduct($Order, $productClass)
    {
        $shippings = $this->createQueryBuilder('s')
            ->innerJoin('Eccube\Entity\OrderItem', 'si', 'WITH', 'si.Shipping = s.id')
            ->where('si.Order = (:order)')
            ->andWhere('si.ProductClass = (:productClass)')
            ->setParameter('order', $Order)
            ->setParameter('productClass', $productClass)
            ->getQuery()
            ->getResult();

        return $shippings;
    }
}
